// @ts-nocheck
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 scene.gltf --transform
Author: Andriano Milanovic (https://sketchfab.com/andriano82)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/mario-floor-lamp-15b2782b523b486ea169d6e16e72123f
Title: Mario Floor Lamp
*/

import { useGLTF } from "@react-three/drei";
import { useRef, useState } from "react";
import { useFrame } from "@react-three/fiber";
import { model } from "./model";

interface Props {
  threeD: model;
}

export const Scene: React.FC<Props> = ({ threeD }) => {
  const [click, setClick] = useState(0);
  const { nodes, materials } = useGLTF(threeD.URL);
  const ref = useRef();
  useFrame(() => (ref.current.rotation.y += click));
  return (
    <group
      ref={ref}
      dispose={null}
      position={threeD.groups[0]?.position}
      rotation={threeD.groups[0]?.rotation}
      scale={threeD.groups[0]?.scale}
      onPointerDown={() => setClick(0.05)}
      onPointerUp={() => setClick(0)}
    >
      <group
        position={threeD.groups[1]?.position}
        rotation={threeD.groups[1]?.rotation}
        scale={threeD.groups[1]?.scale}
      >
        <group
          position={threeD.groups[2]?.position}
          rotation={threeD.groups[2]?.rotation}
          scale={threeD.groups[2]?.scale}
        >
          {threeD.groups[2]?.meshArray.map((e) => (
            <mesh
              key={e.geometry}
              geometry={nodes[e.geometry].geometry}
              material={materials[e.material]}
              rotation={e.rotation}
              scale={e.scale}
            />
          ))}
          <group
            position={threeD.groups[3]?.position}
            rotation={threeD.groups[3]?.rotation}
            scale={threeD.groups[3]?.scale}
          >
            {threeD.groups[3]?.meshArray.map((element) => (
              <mesh
                key={element.geometry}
                geometry={nodes[element.geometry].geometry}
                material={materials[element.material]}
                rotation={element.rotation}
                scale={element.scale}
              />
            ))}
          </group>
        </group>
      </group>
    </group>
  );
};

// useGLTF.preload("/scene-transformed.glb");
